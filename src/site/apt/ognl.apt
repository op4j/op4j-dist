  -------
  Functions: Ognl
  -------

Functions: Ognl

  <<<org.op4j.functions.Ognl>>> is a special functions class which allows the execution of 
  OGNL (Object-Graph Navigation Language) expressions on target objects.

  Here is an example: Imagine your application has a <<<User>>> class which contains a
  <<<getName()>>> method, returning a String. Let's get the names of all the users in a list:
  
+--
List<User> users = ...;
List<String> userNames = Op.on(users).map(Ognl.asString("name")).get();
+--

  The <asX(...)> methods in the <<<Ognl>>> class return <<<IFunction>>> objects (this is, <functions>):
  
*----------------------------+-------------------------------------------------+
  <<Method>>                 | <<Returned function type>>                      |
*----------------------------+-------------------------------------------------+
  <<<asBigDecimal(...)>>>    | <<<IFunction\<Object,BigDecimal\>>>>            |
*----------------------------+-------------------------------------------------+
  <<<asBigInteger(...)>>>    | <<<IFunction\<Object,BigInteger\>>>>            |
*----------------------------+-------------------------------------------------+
  <<<asBoolean(...)>>>       | <<<IFunction\<Object,Boolean\>>>>               |
*----------------------------+-------------------------------------------------+
  <<<asByte(...)>>>          | <<<IFunction\<Object,Byte\>>>>                  |
*----------------------------+-------------------------------------------------+
  <<<asCalendar(...)>>>      | <<<IFunction\<Object,Calendar\>>>>              |
*----------------------------+-------------------------------------------------+
  <<<asCharacter(...)>>>     | <<<IFunction\<Object,Character\>>>>             |
*----------------------------+-------------------------------------------------+
  <<<asDate(...)>>>          | <<<IFunction\<Object,Date\>>>>                  |
*----------------------------+-------------------------------------------------+
  <<<asDouble(...)>>>        | <<<IFunction\<Object,Double\>>>>                |
*----------------------------+-------------------------------------------------+
  <<<asFloat(...)>>>         | <<<IFunction\<Object,Float\>>>>                 |
*----------------------------+-------------------------------------------------+
  <<<asInteger(...)>>>       | <<<IFunction\<Object,Integer\>>>>               |
*----------------------------+-------------------------------------------------+
  <<<asLong(...)>>>          | <<<IFunction\<Object,Long\>>>>                  |
*----------------------------+-------------------------------------------------+
  <<<asObject(...)>>>        | <<<IFunction\<Object,Object\>>>>                |
*----------------------------+-------------------------------------------------+
  <<<asShort(...)>>>         | <<<IFunction\<Object,Short\>>>>                 |
*----------------------------+-------------------------------------------------+
  <<<asString(...)>>>        | <<<IFunction\<Object,String\>>>>                |
*----------------------------+-------------------------------------------------+
  <<<asType(Type<T>,...)>>>  | <<<IFunction\<Object,T\>>>>                     |
*----------------------------+-------------------------------------------------+
  
  Every <asX(...)> method can be passed parameters, and these can be accessed from the OGNL
  expression as an array called <<<#param>>>:  

+--
List<User> users = ...;
Group group = ...;
...
List<User> usersInGroup = 
    Op.on(users).removeAllFalse(Ognl.asBoolean("isInGroup(#param[0])", group).get();
+--

  Also the iteration index can be accessed when iterating a structure (array, list, map or set),
  by means of an expression variable called <<<#index>>>:

+--
List<User> users = ...;
...
List<String> indexedNames = 
    Op.on(users).forEach().exec(Ognl.asString("#index + '$' + #target.name")).get();
+--

  <<<#target>>> is the target object itself. This expression variable is useful when the OGNL 
  expression does not use the target object as an expression root (as was the case with, for
  example, the <<<"name">>> expression in the first example above).
  
    