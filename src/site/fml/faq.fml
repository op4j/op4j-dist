<?xml version="1.0" encoding="ISO-8859-1"?>
<faqs title="Frequently Asked Questions">


  <part id="aboutjavaruntype">
    <title>About op4j</title>
    
    <faq id="where-does-op4-come-from">
      <question>Where does op4j come from? Is it made or backed by any software company?</question>
      <answer>
        <p>
          op4j is Open Source Software created by a Spanish Software Engineer
          called <a href="team.html">Daniel Fernández</a> with help from another Spanish
          Software Engineer called <a href="team.html">Soraya Sánchez</a> in their spare time. 
        </p>
        <p>
          It is neither made nor backed
          by any software (or any other type of) company, and it is offered to the public
          totally free of charge, both in binary and in source code forms, under the <b>Apache License 2.0</b>.
        </p>
      </answer>
    </faq>
    
    <faq id="why-do-you-pronounce-it-opah">
      <question>Why do you pronounce it ['op-ah]?</question>
      <answer>
        <p>
          Why not?   
        </p>
      </answer>
    </faq>
    
    <faq id="why-bending-the-java-spoon">
      <question>Bending the Java spoon? Is this a kind of magic?</question>
      <answer>
        <p>
          Yes, it's a kind of magic ;-).   
        </p>
        <p>
          The biggest problem for op4j is, strange as it seems, Java. During the long and 
          painful development of the op4j concept, the authors felt they were achieving things that
          Java was simply not designed for. Java is terrific and we love it, but it is a highly 
          bureaucratic language, strongly and statically typed, and it has been patched several 
          times over the years in order to acquire some modern features with the requirement
          of not leaving legacy code behind -which has lead to some terrifying creatures like the
          current <i>Generics</i> implementation-. In this scenario, trying to bring to Java 
          features (or more accurately, coding styles) which belonged more in the functional 
          and dynamic programming worlds was really difficult.
        </p>
        <p>
          This is why, realising that they were curling and twisting the language, pushing it
          to its limits and extracting every drop of juice it had to give, the authors felt 
          like being bending the Java spoon. And that is what op4j is about.
        </p>
        <p>
          But it was worth it, wasn't it?
        </p>
      </answer>
    </faq>
    
    <faq id="what-is-relation-javaruntype">
      <question>What is javaRuntype's relation to the op4j project?</question>
      <answer>
        <p>
          javaRuntype was conceived at first as a part of the op4j project [<a href="http://www.op4j.org">http://www.op4j.org</a>],
          and by the same person who created op4j itself, but later during op4j's development it was decided that javaRuntype should be a project
          of its own as its range of application by separate was in fact quite broad.
        </p>
        <p>
          So, javaRuntype remains today as a useful and required dependency for op4j, but it can also
          be used without op4j at all for several different purposes.
        </p>
      </answer>
    </faq>
    
    <faq id="does-op4j-offer-commercial-support">
      <question>Does op4j offer any type of commercial support?</question>
      <answer>
        <p>
          No, it does not. Commercial support is not offered at the moment, but
          there is <a href="http://sourceforge.net/apps/phpbb/op4j/">User Forum</a> at your disposal.
        </p>
      </answer>
    </faq>
    
    <faq id="contribute">
      <question>How can I contribute to op4j?</question>
      <answer>
        <p>
          In many ways:
        </p>
        <ul>
          <li>You can write in the <a href="http://sourceforge.net/apps/phpbb/op4j/">User 
              Forum</a> (or directly to the <a href="team.html">Team</a>) with your
              ideas for improving op4j.</li>
          <li>You can contribute some code, write a patch for a new feature
              or behaviour (please, tell the project admins first about your idea so 
              that effort can be correctly coordinated).</li> 
          <li>You can write articles, reviews, blog posts, etc. about op4j, showing
              how it works or how it integrates with other technologies.</li> 
          <li>You can promote op4j in your company/work and among your colleague developers.</li>
        </ul>
        <p>
          If you want to contribute some code to op4j, please read first the
          page on <a href="contributing.html">Contributing to op4j</a>.
        </p>
      </answer>
    </faq>

  </part>
  

  <part id="general">
    <title>General</title>
    
    <faq id="what-is-op4j-useful-for">
      <question>What is op4j useful for?</question>
      <answer>
        <p>
          op4j is mainly useful for developers. We say it is a <b>developer happiness tool</b> because
          its aim is to enable developers to create cleaner and more readable java code, especially
          auxiliary code (data conversions, structure managing, etc). In order to achieve this, 
          op4j builds on the 
          <i><a href="http://martinfowler.com/bliki/FluentInterface.html">Fluent Interface</a></i>
          concept and also provides a huge set of predefined functions which enable developers to
          perform everyday tasks in an elegant and simple manner.
        </p>
      </answer>
    </faq>
    
    <faq id="where-can-I-find-examples">
      <question>Despite having read all your documentation, I still cannot imagine what is this thing useful for. Where could I find some usage examples?</question>
      <answer>
        <p>
          First of all, congratulations on having read all the docs, you are really brave ;-). 
        </p>
        <p>
          The op4j authors maintain a blog with <i>example recipes</i> which can show you some practical
          examples and give you ideas for using op4j. It is called <b>Bending the Java spoon</b> and
          it can be reached at <a href="http://www.bendingthejavaspoon.com">http://www.bendingthejavaspoon.com</a>.  
        </p>
      </answer>
    </faq>
    
    <faq id="will-op4j-be-obsolete">
      <question>Will op4j be obsolete when Java 7 arrives?</question>
      <answer>
        <p>
          Well, obviously if the authors believed that, we wouldn't have been working on op4j for the 
          last couple of years ;-). The answer is <b>no</b>. 
        </p>
        <p>
          We have heard this comment a couple of times, always coming from people who see op4j as a 
          library for creating <i>closures</i>, which it is not. Function expressions are a nice 
          feature in op4j but -besides not being completely comparable to closures (just similar in concept)-
          creating functions is not the main objective of the library (although it is a nice one).
        </p>
        <p>
          op4j tries to bring Java a little bit closer to the dynamicity of other languages by 
          enabling coding styles more similar to the <i>fluency</i> of some functional 
          languages, something we believe will not be a Java 7 feature. As will not be the several
          hundreds of functions for everyday tasks op4j provides out-of-the-box.
        </p>
        <p>
          And even more: op4j works with Java version 1.5 or higher whereas Java 7's new features 
          will only work with... well, Java 7 ;-)
        </p>
      </answer>
    </faq>
    
  </part>

    
</faqs>