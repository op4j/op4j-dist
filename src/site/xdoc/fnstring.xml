<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">


<document>
  <properties>
    <title>Functions: FnString</title>    
  </properties>
  <body>
  
    <section name="Functions: FnString">

      

      <subsection name="1. Overview">

        <p>
        	<b><a href="http://www.op4j.org/apidocs/org/op4j/functions/FnString.html">FnString</a></b> is a <em>function hub class</em>
        	containing a lot of static methods returning functions that take a <b>String</b> object as its input. It includes 
        	conversions to numbers, calendar and escape functions among others.        	  
        </p>
        
      </subsection>

      <subsection name="2. Functions">


<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>asciify</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> <i>ASCIIfies</i> a String containing text in (mainly) European languages by removing a set of  recognized diacritic symbols and performing a number of transformations. Calling this method is equivalent to calling asciify(AsciifyMode) using the <tt>DEFAULT</tt> mode. </p></td></tr>
<tr class="a"><td><b>asciify</b></td><td>Function&lt;String,String&gt;</td><td>AsciifyMode mode</td><td><p> <i>ASCIIfies</i> a String containing text in (mainly) European languages by removing a set of  recognized diacritic symbols and performing a number of transformations, determined by the <tt> AsciifyMode</tt> parameter. </p> <p> Transformations for <tt>AsciifyMode.DEFAULT</tt> are: </p> <ul>   <li>&#192;, &#193;, &#194;, &#195;, &#196;, &#197;, \u0100, \u0102, \u0104, \u01CD, \u01FA / &#224;, &#225;, &#226;, &#227;, &#228;, &#229;, \u0101, \u0103, \u0105, \u01CE, \u01FB = A / a</li>   <li>&#198;, \u01FC / &#230;, \u01FD = AE / ae</li>   <li>&#199;, \u0106, \u0108, \u010A, \u010C / &#231;, \u0107, \u0109, \u010B, \u010D = C / c</li>   <li>&#208;, \u010E, \u0110 / &#240;, \u010F, \u0111 = D / d</li>   <li>&#200;, &#201;, &#202;, &#203;, \u0112, \u0114, \u0116, \u0118, \u011A / &#232;, &#233;, &#234;, &#235;, \u0113, \u0115, \u0117, \u0119, \u011B = E / e</li>   <li>\u011C, \u011E, \u0120, \u0122 / \u011D, \u011F, \u0121, \u0123 = G / g</li>   <li>\u0124, \u0126 / \u0125, \u0127 = H / h</li>   <li>&#204;, &#205;, &#206;, &#207;, \u0128, \u012A, \u012C, \u012E, \u0130, \u01CF / &#236;, &#237;, &#238;, &#239;, \u0129, \u012B, \u012D, \u012F, \u0131, \u01D0 = I / i</li>   <li>\u0132 / \u0133 = IJ / ij</li>   <li>\u0134 / \u0135 = J / j</li>   <li>\u0136 / \u0137, \u0138  = K / k</li>   <li>\u0139, \u013B, \u013D, \u013F, \u0141 / \u013A, \u013C, \u013E, \u0140, \u0142 = L / l</li>   <li>&#209;, \u0143, \u0145, \u0147, \u014A / &#241;, \u0144, \u0146, \u0148, \u0149, \u014B = N / n</li>   <li>&#210;, &#211;, &#212;, &#213;, &#214;, &#216;, \u014C, \u014E, \u0150, \u01A0, \u01D1, \u01FE / &#242;, &#243;, &#244;, &#245;, &#246;, &#248;, \u014D, \u014F, \u0151, \u01A1, \u01D2, \u01FF = O / o</li>   <li>\u0152 / \u0153 = OE / oe</li>   <li>\u0154, \u0156, \u0158 / \u0155, \u0157, \u0159 = R / r</li>   <li>\u015A, \u015C, \u015E, \u0160 / \u015B, \u015D, \u015F, \u0161 = S / s</li>   <li>&#223; = "ss" if the preceding character is lower case, "SS" otherwise.</li>   <li>\u0162, \u0164, \u0166 / \u0163, \u0165, \u0167 = T / t</li>   <li>&#222; / &#254; = TH / th</li>   <li>&#217;, &#218;, &#219;, &#220;, \u0168, \u016A, \u016C, \u016E, \u0170, \u0172, \u01AF, \u01D3, \u01D5, \u01D7, \u01D9, \u01DB / &#249;, &#250;, &#251;, &#252;, \u0169, \u016B, \u016D, \u016F, \u0171, \u0173, \u01B0, \u01D4, \u01D6, \u01D8, \u01DA, \u01DC = U / u</li>   <li>\u0174 / \u0175 = W / w</li>   <li>&#221;, \u0178, \u0176 / &#253;, &#255;, \u0177 = Y / y</li>   <li>\u0179, \u017B, \u017D / \u017A, \u017C, \u017E = Z / z</li> </ul> <p> Transformations for <tt>AsciifyMode.UMLAUT_E</tt> are the same as <tt>DEFAULT</tt> with the following differences: </p> <ul>   <li>&#196; / &#228; = AE / ae</li>   <li>&#214; / &#246; = OE / oe</li>   <li>&#220; / &#252; = UE / ue</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>capitalize</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Converts the first letter of each word in the target String to upper case. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>contains</b></td><td>Function&lt;String,Boolean&gt;</td><td>String regex</td><td><p> Determines whether the target String contains a fragment matching the specified regular expression. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>endsWith</b></td><td>Function&lt;String, Boolean&gt;</td><td>String suffix</td><td><p> Checkx whether the input  String ends with the specified suffix or not. If the suffix is empty, ends with or is equal to the input, it will return true. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>eq</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Performs an <i>equals</i> operation between the target object and the specified one. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>escapeCSV</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Turns a String into a value valid for being a CSV column value, enclosed in double quotes if needed. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.escapeCsv()</tt>. From its definition: </p> <ul>   <li>If the value contains a comma, newline or double quote, then the       String value is written enclosed in double quotes.</li>   <li>Any double quote characters in the value are escaped with another double quote.</li>   <li>If the value does not contain a comma, newline or double quote, then the       String value is written unchanged (null values are ignored).</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>escapeHTML</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Escapes the characters in a <code>String</code> using HTML entities. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.escapeHtml()</tt>. From its definition: </p> <ul>   <li>The string <code>"bread" &amp; "butter"</code> becomes        <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.</li>   <li>Supports all known HTML 4.0 entities, including funky accents.       Note that the commonly used apostrophe escape character (&amp;apos;)       is not a legal entity and so is not supported).</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>escapeJavaScript</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Escapes the characters in a <code>String</code> using JavaScript String rules. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.escapeJavascript()</tt>. From its definition: </p> <ul>    <li>Escapes any values it finds into their JavaScript String form.       Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.)</li>   <li>So a tab becomes the characters <code>'\\'</code> and <code>'t'</code>.</li>   <li>The only difference between Java strings and JavaScript strings       is that in JavaScript, a single quote must be escaped.</li> </ul> <p>Example:</p> <ul>   <li>input string: <tt>He didn't say, &quot;Stop!&quot;</tt></li>   <li>output string: <tt>He didn\'t say, \&quot;Stop!\&quot;</tt></li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>escapeXML</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Escapes the characters in a <code>String</code> using XML entities. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.escapeXml()</tt>. From its definition: </p> <ul>   <li>For example: <tt>"bread" &amp; "butter"</tt> =>       <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.</li>   <li>Supports only the five basic XML entities (gt, lt, quot, amp, apos).       Does not support DTDs or external entities.</li>   <li>Note that unicode characters greater than 0x7f are currently escaped to     their numerical \\u equivalent. This may change in future releases.</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>extractAll</b></td><td>Function&lt;String,List&lt;String&gt;&gt;</td><td>String regex</td><td><p> Extracts every substring from the target String that match the specified regular expression. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>extractFirst</b></td><td>Function&lt;String,String&gt;</td><td>String regex</td><td><p> Extracts the first substring from the target String that matches the specified regular expression. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>extractLast</b></td><td>Function&lt;String,String&gt;</td><td>String regex</td><td><p> Extracts the last substring from the target String that matches the specified regular expression. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>fromHexadecimal</b></td><td>Function&lt;String,String&gt;</td><td>Charset charset</td><td><p> Converts the target String from the Hexadecimal representation of its bytes back into  a String using the specified Charset. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>greaterOrEqTo</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>greaterThan</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isAlpha</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Checks if a String contains only unicode letters or not </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isAlphaSpace</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Checks if a String contains only unicode letters and spaces or not </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isBigDecimal</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  BigDecimal. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. </p></td></tr>
<tr class="a"><td><b>isBigDecimal</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  BigDecimal in the given  Locale </p></td></tr>
<tr class="b"><td><b>isBigDecimal</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  BigDecimal in the given  Locale specified as a  String </p></td></tr>
<tr class="a"><td><b>isBigDecimal</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  BigDecimal using the specified decimal point configuration ( DecimalPoint).  </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isBigInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  BigInteger. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. </p></td></tr>
<tr class="a"><td><b>isBigInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  BigInteger in the given  Locale </p></td></tr>
<tr class="b"><td><b>isBigInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  BigInteger in the given  Locale specified as a  String </p></td></tr>
<tr class="a"><td><b>isBigInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  BigInteger using the specified decimal point configuration ( DecimalPoint).  </p></td></tr>
<tr class="b"><td><b>isBigInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>int radix</td><td><p> Returns true if the input  String can be converted into a  valid  BigInteger in the specified radix. It uses the default configuration to check the  String </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isBlank</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Returns whether the target  String is blank or not. It calls   StringUtils#isBlank(String). The string is blank if it is whitespace, empty ("") or null. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isByte</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Byte. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#toByte() will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isByte</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Byte in the given  Locale. If this method returns false,  FnString#toByte(Locale) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isByte</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Byte in the given  Locale specified as a  String. If this method returns false,  FnString#toByte(String) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isByte</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Byte using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#toByte(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isByte</b></td><td>Function&lt;String,Boolean&gt;</td><td>int radix</td><td><p> Returns true if the input  String can be converted into a  valid  Byte in the specified radix. It uses the default configuration to check the  String. If this method returns false,  FnString#toByte(int) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isCalendar</b></td><td>Function&lt;String,Boolean&gt;</td><td>String pattern</td><td><p> Checks whether the target String can be converted into a Calendar based on the input parameters or not. If it returns true,  FnString#toCalendar(String) can be called safely. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="b"><td><b>isCalendar</b></td><td>Function&lt;String,Boolean&gt;</td><td>String pattern<br />Locale locale</td><td><p> Checks whether the target  String represents a  Calendar or not. If it returns true,  FnString#toCalendar(String, Locale) can be called safely. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="a"><td><b>isCalendar</b></td><td>Function&lt;String,Boolean&gt;</td><td>String pattern<br />String locale</td><td><p> Returns true if the target  String can be converted into a  Calendar based on the input parameters. If it returns true, the function  ToCalendar#ToCalendar(String, String) can be called safely. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isDouble</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Double. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#toDouble() will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isDouble</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Double in the given  Locale. If this method returns false,  FnString#toDouble(Locale) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isDouble</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Double in the given  Locale specified as a  String. If this method returns false,  FnString#toDouble(String) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isDouble</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Double using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#toDouble(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isEmpty</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Returns whether the target  String is empty or not. It calls   StringUtils#isEmpty(String). The string is empty if it is ""  or null </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isFloat</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Float. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#isFloat() will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isFloat</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Float in the given  Locale. If this method returns false,  FnString#isFloat(Locale) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isFloat</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Float in the given  Locale specified as a  String. If this method returns false,  FnString#isFloat(String) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isFloat</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Float using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#isFloat(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Integer. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#isInteger() will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Integer in the given  Locale. If this method returns false,  FnString#isInteger(Locale) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Integer in the given  Locale specified as a  String. If this method returns false,  FnString#isInteger(String) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Integer using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#isInteger(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isInteger</b></td><td>Function&lt;String,Boolean&gt;</td><td>int radix</td><td><p> Returns true if the input  String can be converted into a  valid  Integer in the specified radix. It uses the default configuration to check the  String. If this method returns false,  FnString#isInteger(int) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isLong</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Long. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#isLong() will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isLong</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Long in the given  Locale. If this method returns false,  FnString#isLong(Locale) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isLong</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Long in the given  Locale specified as a  String. If this method returns false,  FnString#isLong(String) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isLong</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Long using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#isLong(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isLong</b></td><td>Function&lt;String,Boolean&gt;</td><td>int radix</td><td><p> Returns true if the input  String can be converted into a  valid  Long in the specified radix. It uses the default configuration to check the  String. If this method returns false,  FnString#isLong(int) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isNotNull</b></td><td>Function&lt;Object,Boolean&gt;</td><td></td><td><p> Determines whether the target object is null or not. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isNull</b></td><td>Function&lt;Object,Boolean&gt;</td><td></td><td><p> Determines whether the target object is null or not. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isNumeric</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Checks if a String contains only unicode digits or not </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isNumericSpace</b></td><td>Function&lt;String, Boolean&gt;</td><td></td><td><p> Checks if a String contains only unicode digits and spaces or not </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isShort</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Returns true if the input  String can be converted into a  valid  Short. It uses the default configuration from the JVM (en_US) to check whether the string is valid or not. If this method returns false,  FnString#isShort() will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isShort</b></td><td>Function&lt;String,Boolean&gt;</td><td>Locale locale</td><td><p> Returns true if the input  String can be converted into a  valid  Short in the given  Locale. If this method returns false,  FnString#isShort(Locale) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isShort</b></td><td>Function&lt;String,Boolean&gt;</td><td>String locale</td><td><p> Returns true if the input  String can be converted into a  valid  Short in the given  Locale specified as a  String. If this method returns false,  FnString#isShort(String) will throw an exception if called. </p></td></tr>
<tr class="b"><td><b>isShort</b></td><td>Function&lt;String,Boolean&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Returns true if the input  String can be converted into a  valid  Short using the specified decimal point configuration ( DecimalPoint).  If this method returns false,  FnString#isShort(DecimalPoint) will throw an exception if called. </p></td></tr>
<tr class="a"><td><b>isShort</b></td><td>Function&lt;String,Boolean&gt;</td><td>int radix</td><td><p> Returns true if the input  String can be converted into a  valid  Short in the specified radix. It uses the default configuration to check the  String. If this method returns false,  FnString#isShort(int) will throw an exception if called. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>join</b></td><td>Function&lt;List&lt;Object&gt;, String&gt;</td><td></td><td><p> Joins the string representation of the objects in the list (which might be Strings themselves) into a single String (no separator used). </p></td></tr>
<tr class="a"><td><b>join</b></td><td>Function&lt;List&lt;Object&gt;, String&gt;</td><td>String separator</td><td><p> Joins the string representation of the objects in the list (which might be Strings themselves) into a single String using the given separator. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>joinArray</b></td><td>Function&lt;Object[], String&gt;</td><td></td><td><p> Joins the string representation of the objects in the array (which might be Strings themselves) into a single String (no separator used). </p></td></tr>
<tr class="a"><td><b>joinArray</b></td><td>Function&lt;Object[], String&gt;</td><td>String separator</td><td><p> Joins the string representation of the objects in the array (which might be Strings themselves) into a single String using the given separator. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>lessOrEqTo</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>lessThan</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>matchAndExtract</b></td><td>Function&lt;String,String&gt;</td><td>String regex<br />int group</td><td><p> Matches the entire target String against the specified regular expression and extracts the specified group from it (as specified by <tt>java.util.regex.Matcher</tt>. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>matchAndExtractAll</b></td><td>Function&lt;String,List&lt;String&gt;&gt;</td><td>String regex<br />int... groups</td><td><p> Matches the entire target String against the specified regular expression and extracts the specified groups from it (as specified by <tt>java.util.regex.Matcher</tt>. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>matches</b></td><td>Function&lt;String,Boolean&gt;</td><td>String regex</td><td><p> Determines whether the target String matches the specified regular expression. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>notEq</b></td><td>Function&lt;Object,Boolean&gt;</td><td>String object</td><td><p> Performs an inverse <i>equals</i> operation between the target object and the specified one. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>replaceAll</b></td><td>Function&lt;String,String&gt;</td><td>String regex<br />String replacement</td><td><p> Replaces in the target String all substrings matching the specified regular expression with the specified replacement String. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>replaceFirst</b></td><td>Function&lt;String,String&gt;</td><td>String regex<br />String replacement</td><td><p> Replaces in the target String the first substring matching the specified regular expression with the specified replacement String. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>replaceLast</b></td><td>Function&lt;String,String&gt;</td><td>String regex<br />String replacement</td><td><p> Replaces in the target String the last substring matching the specified regular expression with the specified replacement String. </p> <p> Regular expressions must conform to the <tt>java.util.regex.Pattern</tt> format. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>reverse</b></td><td>Function&lt;String, String&gt;</td><td></td><td><p> It reverses the input  String </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>split</b></td><td>Function&lt;String, List&lt;String&gt;&gt;</td><td></td><td><p> Splits a String into a list of substrings using a whitespace as a separator. </p></td></tr>
<tr class="a"><td><b>split</b></td><td>Function&lt;String, List&lt;String&gt;&gt;</td><td>String separator</td><td><p> Splits a String into a list of substrings using the given separator as a substrings separator (the separator is not included in the elements of the returned list). </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>splitAsArray</b></td><td>Function&lt;String, String[]&gt;</td><td></td><td><p> Splits a String into an array of substrings using a whitespace as a separator. </p></td></tr>
<tr class="a"><td><b>splitAsArray</b></td><td>Function&lt;String, String[]&gt;</td><td>String separator</td><td><p> Splits a String into an array of substrings using the given separator as a substrings separator (the separator is not included in the elements of the returned array). </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>startsWith</b></td><td>Function&lt;String, Boolean&gt;</td><td>String prefix</td><td><p> It checks whether the input  String starts with the specified prefix or not. If the suffix is empty, starts with or is equal to  the input, it will return true. </p></td></tr>
<tr class="a"><td><b>startsWith</b></td><td>Function&lt;String, Boolean&gt;</td><td>String prefix<br />int offset</td><td><p> It checks whether the input substring after the given offset starts with the given prefix or not.  </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>strip</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Strips whitespace from both sides of the target String. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>substring</b></td><td>Function&lt;String, String&gt;</td><td>int start</td><td><p> Returns the substring of input from start position (null if null  String input). It calls  StringUtils#substring(String, int) </p></td></tr>
<tr class="b"><td><b>substring</b></td><td>Function&lt;String, String&gt;</td><td>int start<br />int end</td><td><p> Returns the substring of input from start position to end position (null if null  String input). It calls  StringUtils#substring(String, int, int) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>substringAfter</b></td><td>Function&lt;String, String&gt;</td><td>String separator</td><td><p> Returns the substring after the first occurrence of the given separator. It calls   StringUtils#substringAfter(String, String) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>substringAfterLast</b></td><td>Function&lt;String, String&gt;</td><td>String separator</td><td><p> Returns the substring after the last occurrence of the given separator. It calls   StringUtils#substringAfterLast(String, String) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>substringBefore</b></td><td>Function&lt;String, String&gt;</td><td>String separator</td><td><p> Returns the substring before the first occurrence of the given separator. It calls   StringUtils#substringBefore(String, String) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>substringBeforeLast</b></td><td>Function&lt;String, String&gt;</td><td>String separator</td><td><p> Returns the substring before the last occurrence of the given separator. It calls   StringUtils#substringBeforeLast(String, String) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>substringBetween</b></td><td>Function&lt;String, String&gt;</td><td>String tag</td><td><p> Returns the substring between tag and tag or null if there is no match. It calls   StringUtils#substringBetween(String, String) </p></td></tr>
<tr class="b"><td><b>substringBetween</b></td><td>Function&lt;String, String&gt;</td><td>String open<br />String close</td><td><p> Returns the substring between open and close or null if there is no match. It calls   StringUtils#substringBetween(String, String, String) </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td></td><td><p> Converts a String into a BigDecimal, using the default configuration for for decimal point and precision. </p></td></tr>
<tr class="b"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>Locale locale</td><td><p> Converts a String into a BigDecimal, using the specified locale for decimal point and thousands separator configuration. </p></td></tr>
<tr class="a"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>String locale</td><td><p> Converts a String into a BigDecimal, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.) </p></td></tr>
<tr class="b"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a BigDecimal, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. </p></td></tr>
<tr class="a"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> Converts a String into a BigDecimal, using the default configuration for for decimal point and thousands separator and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  </p></td></tr>
<tr class="b"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a BigDecimal, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value. </p></td></tr>
<tr class="a"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a BigDecimal, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  Locale is specified as a String (for example: "en_US", "es_ES", etc.) </p></td></tr>
<tr class="b"><td><b>toBigDecimal</b></td><td>Function&lt;String,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a BigDecimal, using the specified decimal point configuration ( DecimalPoint) and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.. The target String should contain no thousand separators. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td></td><td><p> Converts a String into a BigInteger, using the default configuration. Any fractional part of the input String will be removed.  </p></td></tr>
<tr class="b"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>Locale locale</td><td><p> Converts a String into a BigInteger, using the specified locale for decimal point and thousands separator configuration. Any fractional part of the input String will be removed. </p></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>String locale</td><td><p> Converts a String into a BigInteger, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). Any fractional part of the input String will be removed. </p></td></tr>
<tr class="b"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a BigInteger, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. Any fractional part of the input String will be removed. </p></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>int radix</td><td><p> Converts a String into a BigInteger, using the specified radix for computing the equivalent number. The input String must be a valid BigInteger in the given radix (i.e. if radix is 5, 34 would be a valid input whereas 34.3 wouldn't as '.' is not allowed).  </p></td></tr>
<tr class="b"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>RoundingMode roundingMode</td><td><p> Converts a String into a BigInteger, using the default configuration for for decimal point and thousands separator. Rounding mode is used for removing the decimal part of the number.  Any fractional part of the input String will be removed. </p></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a BigInteger, using the specified decimal point configuration ( DecimalPoint). Rounding mode is used for removing the  decimal part of the number. The target String should contain no thousand separators. Any fractional part of the input String will be removed. </p></td></tr>
<tr class="b"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a BigInteger, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Any fractional part of the input String will be removed. </p></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;String,BigInteger&gt;</td><td>RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a BigInteger, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Locale is specified as a String (for example: "en_US", "es_ES", etc.). Any fractional part of the input String will be removed. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toBoolean</b></td><td>Function&lt;String,Boolean&gt;</td><td></td><td><p> Converts a String into a Boolean. Case is ignored, and all three  "true"/"false", "yes"/"no" and "on"/"off" versions are  supported.   </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.toBooleanObject()</tt>. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td></td><td><p> Converts a String into a Byte, using the default configuration. Any fractional part of the input String will be removed. The  integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>Locale locale</td><td><p> Converts a String into a Byte, using the specified locale for decimal point and thousands separator configuration. The  integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>String locale</td><td><p> Converts a String into a Byte, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a Byte, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>int radix</td><td><p> Converts a String into a Byte, using the specified radix for computing the equivalent number. The input String must be a valid Byte in the given radix </p></td></tr>
<tr class="b"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>RoundingMode roundingMode</td><td><p> Converts a String into a Byte, using the default configuration for for decimal point and thousands separator. Rounding mode is used for removing the decimal part of the number. The integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE  </p></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a Byte, using the specified decimal point configuration ( DecimalPoint). Rounding mode is used for removing the  decimal part of the number. The target String should contain no thousand separators. The integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a Byte, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. The integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;String,Byte&gt;</td><td>RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a Byte, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Byte#MIN_VALUE and  Byte#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toCalendar</b></td><td>Function&lt;String,Calendar&gt;</td><td>String pattern</td><td><p> Converts the target String to a <tt>java.util.Calendar</tt> by applying the specified pattern. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="a"><td><b>toCalendar</b></td><td>Function&lt;String,Calendar&gt;</td><td>String pattern<br />Locale locale</td><td><p> Converts the target String to a <tt>java.util.Calendar</tt> by applying the specified pattern and locale. The locale is needed for correctly parsing month names. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="b"><td><b>toCalendar</b></td><td>Function&lt;String,Calendar&gt;</td><td>String pattern<br />String locale</td><td><p> Converts the target String to a <tt>java.util.Calendar</tt> by applying the specified pattern and locale. The locale is needed for correctly parsing month names. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toDate</b></td><td>Function&lt;String,Date&gt;</td><td>String pattern</td><td><p> Converts the target String to a <tt>java.util.Date</tt> by applying the specified pattern. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="b"><td><b>toDate</b></td><td>Function&lt;String,Date&gt;</td><td>String pattern<br />Locale locale</td><td><p> Converts the target String to a <tt>java.util.Date</tt> by applying the specified pattern and locale. The locale is needed for correctly parsing month names. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr class="a"><td><b>toDate</b></td><td>Function&lt;String,Date&gt;</td><td>String pattern<br />String locale</td><td><p> Converts the target String to a <tt>java.util.Date</tt> by applying the specified pattern and locale. The locale is needed for correctly parsing month names. </p> <p> Pattern format is that of <tt>java.text.SimpleDateFormat</tt>. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td></td><td><p> Converts a String into a Double, using the default configuration for for decimal point and precision.  The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>Locale locale</td><td><p> Converts a String into a Double, using the specified locale for decimal point and thousands separator configuration.  The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>String locale</td><td><p> Converts a String into a Double, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a Double, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> Converts a String into a Double, using the default configuration for for decimal point and thousands separator and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>int scale<br />RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a Double, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>int scale<br />RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a Double, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  Locale is specified as a String (for example: "en_US", "es_ES", etc.). The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toDouble</b></td><td>Function&lt;String,Double&gt;</td><td>int scale<br />RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a Double, using the specified decimal point configuration ( DecimalPoint) and establishing the specified scale. Rounding mode is used for setting the scale to the specified value. The input string must be between   Double#MIN_VALUE and  Double#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td></td><td><p> Converts a String into a Float, using the default configuration for for decimal point and precision.  The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>Locale locale</td><td><p> Converts a String into a Float, using the specified locale for decimal point and thousands separator configuration. The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>String locale</td><td><p> Converts a String into a Float, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a Float, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> Converts a String into a Float, using the default configuration for for decimal point and thousands separator and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>int scale<br />RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a Float, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>int scale<br />RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a Float, using the specified locale for decimal point and thousands separator configuration and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.  Locale is specified as a String (for example: "en_US", "es_ES", etc.). The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toFloat</b></td><td>Function&lt;String,Float&gt;</td><td>int scale<br />RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a Float, using the specified decimal point configuration ( DecimalPoint) and establishing the specified scale. Rounding mode is used for setting the scale to the specified value.. The target String should contain no thousand separators. The input string must be between   Float#MIN_VALUE and  Float#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toHexadecimal</b></td><td>Function&lt;String,String&gt;</td><td>Charset charset</td><td><p> Converts the target String into the Hexadecimal representation of its bytes using the  specified Charset to obtain them (the bytes). </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td></td><td><p> Converts a String into an Integer, using the default  configuration. The integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>Locale locale</td><td><p> Converts a String into an Integer, using the specified locale for decimal point and thousands separator configuration. The  integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>String locale</td><td><p> Converts a String into an Integer, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into an Integer, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>int radix</td><td><p> Converts a String into an Integer, using the specified radix for computing the equivalent number. The input String must be a valid Integer in the given radix (i.e. if radix is 5, 34 would be a valid input whereas 34.3 wouldn't as '.' is not allowed)  </p></td></tr>
<tr class="b"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>RoundingMode roundingMode</td><td><p> Converts a String into an Integer, using the default configuration for for decimal point and thousands separator. Rounding mode is used for removing the decimal part of the number. The  integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into an Integer, using the specified decimal point configuration ( DecimalPoint). Rounding mode is used for removing the  decimal part of the number. The target String should contain no thousand separators. The integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into an Integer, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. The integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;String,Integer&gt;</td><td>RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into an Integer, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Integer#MIN_VALUE and  Integer#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td></td><td><p> Converts a String into a Long, using the default configuration. The integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>Locale locale</td><td><p> Converts a String into a Long, using the specified locale for decimal point and thousands separator configuration. The  integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>String locale</td><td><p> Converts a String into a Long, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a Long, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>int radix</td><td><p> Converts a String into a Long, using the specified radix for computing the equivalent number. The input String must be a valid Long in the given radix (i.e. if radix is 5, 34 would be a valid input whereas 34.3 wouldn't as '.' is not allowed)  </p></td></tr>
<tr class="a"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>RoundingMode roundingMode</td><td><p> Converts a String into a Long, using the default configuration for for decimal point and thousands separator. Rounding mode is used for removing the decimal part of the number. The  integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a Long, using the specified decimal point configuration ( DecimalPoint). Rounding mode is used for removing the  decimal part of the number. The target String should contain no thousand separators. The integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a Long, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. The integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;String,Long&gt;</td><td>RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a Long, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Long#MIN_VALUE and  Long#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toLowerCase</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Converts the target String to lower case. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td></td><td><p> Converts a String into a Short, using the default configuration. The integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>Locale locale</td><td><p> Converts a String into a Short, using the specified locale for decimal point and thousands separator configuration. The  integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>String locale</td><td><p> Converts a String into a Short, using the specified locale for decimal point and thousands separator configuration. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>DecimalPoint decimalPoint</td><td><p> Converts a String into a Short, using the specified decimal point configuration ( DecimalPoint). The target String should contain no thousand separators. The integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>int radix</td><td><p> Converts a String into a Short, using the specified radix for computing the equivalent number. The input String must be a valid Short in the given radix (i.e. if radix is 5, 34 would be a valid input whereas 34.3 wouldn't as '.' is not allowed)  </p></td></tr>
<tr class="a"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>RoundingMode roundingMode</td><td><p> Converts a String into a Short, using the default configuration for for decimal point and thousands separator. Rounding mode is used for removing the decimal part of the number. The  integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>RoundingMode roundingMode<br />DecimalPoint decimalPoint</td><td><p> Converts a String into a Short, using the specified decimal point configuration ( DecimalPoint). Rounding mode is used for removing the  decimal part of the number. The target String should contain no thousand separators. The integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="a"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>RoundingMode roundingMode<br />Locale locale</td><td><p> Converts a String into a Short, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. The integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;String,Short&gt;</td><td>RoundingMode roundingMode<br />String locale</td><td><p> Converts a String into a Short, using the specified locale for determining decimal point. Rounding mode is used for removing the  decimal part of the number. Locale is specified as a String (for example: "en_US", "es_ES", etc.). The  integer part of the input string must be between   Short#MIN_VALUE and  Short#MAX_VALUE </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toUpperCase</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Converts the target String to upper case. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>trim</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Removes control characters (char &lt;= 32) from both ends of the target String. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>unCapitalize</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Converts the first letter of each word in the target String to lowercase </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>unescapeCSV</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Removes escaping from a String escaped for a CSV column. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.unescapeCsv()</tt>. From its definition: </p> <ul>   <li>Returns a <code>String</code> value for an unescaped CSV column.</li>   <li>If the value is enclosed in double quotes, and contains a comma, newline        or double quote, then quotes are removed.</li>    <li>Any double quote escaped characters (a pair of double quotes) are unescaped        to just one double quote.</li>   <li>If the value is not enclosed in double quotes, or is and does not contain a        comma, newline or double quote, then the String value is returned unchanged.</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>unescapeHTML</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.unescapeHtml()</tt>. From its definition: </p> <ul>   <li>The string <tt>&amp;lt;Fran&amp;ccedil;ais&amp;gt;</tt>       will become <tt>&lt;Fran&ccedil;ais&gt;</tt></li>   <li>If an entity is unrecognized, it is left alone, and inserted       verbatim into the result string. e.g. <tt>&amp;gt;&amp;zzzz;x</tt> will       become <tt>&gt;&amp;zzzz;x</tt>.</li> </ul></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>unescapeJavaScript</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Unescapes any JavaScript literals found in the <code>String</code>. </p> <p> For example, it will turn a sequence of <code>'\'</code> and <code>'n'</code> into a newline character, unless the <code>'\'</code> is preceded by another <code>'\'</code>. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.unescapeJavascript()</tt>. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>unescapeXML</b></td><td>Function&lt;String,String&gt;</td><td></td><td><p> Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes. </p> <p> This method calls <tt>org.apache.commons.lang.StringUtils.unescapeXml()</tt>. From its definition: </p> <ul>   <li>Supports only the five basic XML entities (gt, lt, quot, amp, apos).       Does not support DTDs or external entities.</li>   <li>Note that numerical \\u unicode codes are unescaped to their respective        unicode characters. This may change in future releases.</li> </ul></td></tr>
</tbody></table>

</subsection>
</section>
</body>
</document>


