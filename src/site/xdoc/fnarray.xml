 <!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">


<document>
  <properties>
    <title>Functions: FnArray</title>    
  </properties>
  <body>
  
    <section name="Functions: FnArray">
      

      <subsection name="1. Overview">
        <p>
            <a href="http://www.op4j.org/apidocs/org/op4j/functions/FnArray.html"><b>FnArray</b></a> is a 
            <em>parameterizable function hub class</em> and, before giving you access to the real functions, you will 
            have to specify the type parameter, which will give you access to the functions containing the operations
            on <em>Arrays</em>:                                    
        </p>
        <ul>
            <li>
                <code>FnArray.ofBigDecimal()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;BigDecimal&gt;</a>                       
            </li>
            <li>
                <code>FnArray.ofBigInteger()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;BigInteger&gt;</a>                      
            </li>
            <li>
                <code>FnArray.ofBoolean()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Boolean&gt;</a>                            
            </li>
            <li>
                <code>FnArray.ofByte()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Byte&gt;</a>                               
            </li> 
            <li>
                <code>FnArray.ofCalendar()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Calendar&gt;</a>                          
            </li> 
            <li>
                <code>FnArray.ofCharacter()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Character&gt;</a>                         
            </li> 
            <li>
                <code>FnArray.ofDate()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Date&gt;</a>                               
            </li>
            <li>
                <code>FnArray.ofDouble()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Double&gt;</a>                              
            </li>
            <li>
                <code>FnArray.ofFloat()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Float&gt;</a>                               
            </li> 
            <li>
                <code>FnArray.ofInteger()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Integer&gt;</a>                            
            </li>
            <li>
                <code>FnArray.ofLong()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Long&gt;</a>                              
            </li> 
            <li>
                <code>FnArray.ofObject()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Object&gt;</a>                              
            </li>
            <li>
                <code>FnArray.ofShort()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;Short&gt;</a>                               
            </li>
            <li>
                <code>FnArray.ofString()</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;String&gt;</a>                              
            </li>
            <li>
                <code>FnArray.of(final Type&lt;T&gt; type)</code>: returns <a href="#FnArrayOf">FnArrayOf&lt;T&gt;</a> 
                parameterized with the given type. This is the most generic function in <em>FnArray</em>                               
            </li>
            <li>
                <code>FnArray.ofArrayOf(final Type&lt;T&gt; type)</code>: returns <a href="#FnArrayOfArrayOf">FnArrayOfArrayOf&lt;T&gt;</a> 
                parameterized with the given type.                             
            </li>
            <li>
                <code>FnArray.ofListOf(final Type&lt;T&gt; type)</code>: returns <a href="#FnArrayOfListOf">FnArrayOfListOf&lt;T&gt;</a> 
                parameterized with the given type.                              
            </li>
            <li>
                <code>FnArray.ofSetOf(final Type&lt;T&gt; type)</code>: returns <a href="#FnArrayOfSetOf">FnArrayOfSetOf&lt;T&gt;</a> 
                parameterized with the given type.                         
            </li>  
        </ul>
                
      </subsection>

      <subsection name="FnArrayOf">

        <p>
          The functions in <b>FnArrayOf</b> are applied on <em>Arrays</em>. <em>FnArrayOf is a parameterizable class</em> so, 
          in order to use it, you must specify the type parameter (i.e. FnArray.ofBigDecimal(), FnArray.ofLong(), 
          FnArray.of(final Type&lt;T&gt; type), ...).                            
        </p>
        <p>
          <code>FnArray.of(final Type&lt;T&gt; type)</code>
          is the most generic method that gives you access to <em>FnArrayOf</em> though there are some shortcuts for common classes:
          <code>FnArray.ofBigDecimal(), FnArray.ofInteger(), FnArray.ofDate(), FnArray.ofCharacter(), ...</code>
        </p>
        <p>
          The examples below show how these functions can be used:
        </p>
        <div class="source">
        <pre>
/* This piece of code converts the Strings into Calendar and sorts them */        
Op.on(new String[] {"2000/11/10", "2010/10/10", "2000/01/10"})
	.forEach().exec(Types.CALENDAR, FnString.toCalendar("yyyy/MM/dd")).endFor()
	.exec(FnArray.ofCalendar().sort()).get();
	
/* This piece of code creates the map {first = [23], second = [2.3], third = [-23.456]} */        
Op.on(new BigDecimal[] {BigDecimal.valueOf(23), BigDecimal.valueOf(2.3), BigDecimal.valueOf(-23.456)})
	.exec(FnArray.ofBigDecimal().zipAndGroupKeys("first", "second", "third")).get();
	
/* This piece of code creates the map {ff0000 = red, 00ff00 = green, 0000ff = blue} */	
Op.onArrayFor("ff0000", "red", "00ff00", "green", "0000ff", "blue")
	.exec(FnArray.ofString().couple()).get();</pre>
        </div>
        
        <div>
	    <!-- Table with functions -->
        <table border="0">
		<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
		<tbody>
		<tr class="b"><td><b>addAll</b></td><td>Function&lt;T[],T[]&gt;</td><td>Collection&lt;T&gt; collection</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>all</b></td><td>Function&lt;T[],Boolean&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>any</b></td><td>Function&lt;T[],Boolean&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>contains</b></td><td>Function&lt;T[],Boolean&gt;</td><td>T object</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>count</b></td><td>Function&lt;Object[],Integer&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>couple</b></td><td>Function&lt;T[],Map&lt;T,T&gt;&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>coupleAndGroup</b></td><td>Function&lt;T[],Map&lt;T,T[]&gt;&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>distinct</b></td><td>Function&lt;T[],T[]&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>notContains</b></td><td>Function&lt;T[],Boolean&gt;</td><td>T object</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>reduce</b></td><td>Function&lt;T[],T&gt;</td><td>IFunction&lt;? extends ValuePair&lt;? super T,? super T&gt;, ? extends T&gt; function</td><td></td></tr>
		<tr class="b"><td><b>reduce</b></td><td>Function&lt;T[],R&gt;</td><td>IFunction&lt;? extends ValuePair&lt;? super R,? super T&gt;,R&gt; function<br />R initialValue</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>removeAllFalse</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>removeAllNotNullAndFalse</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>removeAllNotNullAndTrue</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>removeAllNull</b></td><td>Function&lt;T[],T[]&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>removeAllNullOrFalse</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>removeAllNullOrTrue</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>removeAllTrue</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T,Boolean&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>reverse</b></td><td>Function&lt;T[],T[]&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>sort</b></td><td>Function&lt;T[],T[]&gt;</td><td>Comparator&lt;? super T&gt; comparator</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>sortBy</b></td><td>Function&lt;T[],T[]&gt;</td><td>IFunction&lt;? super T, ?&gt; by</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>toGroupMapOf</b></td><td>Function&lt;T[],Map&lt;K,V[]&gt;&gt;</td><td>Type&lt;V&gt; valueType<br />IFunction&lt;? super T,K&gt; keyFunction<br />IFunction&lt;? super T,V&gt; valueFunction</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>toList</b></td><td>Function&lt;T[],List&lt;T&gt;&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>toMap</b></td><td>Function&lt;T[],Map&lt;K,V&gt;&gt;</td><td>IFunction&lt;? super T,K&gt; keyFunction<br />IFunction&lt;? super T,V&gt; valueFunction</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>toSet</b></td><td>Function&lt;T[],Set&lt;T&gt;&gt;</td><td></td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>unfold</b></td><td>Function&lt;T,T[]&gt;</td><td>IFunction&lt;? super T,? extends T&gt; function</td><td></td></tr>
		<tr class="b"><td><b>unfold</b></td><td>Function&lt;T,T[]&gt;</td><td>IFunction&lt;? super T,? extends T&gt; function<br />IFunction&lt;? super T,Boolean&gt; whileCondition</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>zipAndGroupKeysBy</b></td><td>Function&lt;T[],Map&lt;K,T[]&gt;&gt;</td><td>IFunction&lt;? super T, K&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>zipAndGroupKeysFrom</b></td><td>Function&lt;T[],Map&lt;K,T[]&gt;&gt;</td><td>Collection&lt;K&gt; keys</td><td></td></tr>
		<tr class="a"><td><b>zipAndGroupKeysFrom</b></td><td>Function&lt;T[],Map&lt;K,T[]&gt;&gt;</td><td>K[] keys</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>zipAndGroupValuesBy</b></td><td>Function&lt;T[],Map&lt;T,V[]&gt;&gt;</td><td>Type&lt;V&gt; valueType<br />IFunction&lt;? super T, V&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>zipAndGroupValuesFrom</b></td><td>Function&lt;T[],Map&lt;T,V[]&gt;&gt;</td><td>Type&lt;V&gt; valueType<br />Collection&lt;V&gt; values</td><td></td></tr>
		<tr class="b"><td><b>zipAndGroupValuesFrom</b></td><td>Function&lt;T[],Map&lt;T,V[]&gt;&gt;</td><td>Type&lt;V&gt; valueType<br />V[] values</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>zipKeysBy</b></td><td>Function&lt;T[],Map&lt;K,T&gt;&gt;</td><td>IFunction&lt;? super T, K&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>zipKeysFrom</b></td><td>Function&lt;T[],Map&lt;K,T&gt;&gt;</td><td>Collection&lt;K&gt; keys</td><td></td></tr>
		<tr class="a"><td><b>zipKeysFrom</b></td><td>Function&lt;T[],Map&lt;K,T&gt;&gt;</td><td>K[] keys</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="b"><td><b>zipValuesBy</b></td><td>Function&lt;T[],Map&lt;T,V&gt;&gt;</td><td>IFunction&lt;? super T, V&gt; eval</td><td></td></tr>
		<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
		<tr class="a"><td><b>zipValuesFrom</b></td><td>Function&lt;T[],Map&lt;T,V&gt;&gt;</td><td>Collection&lt;V&gt; values</td><td></td></tr>
		<tr class="b"><td><b>zipValuesFrom</b></td><td>Function&lt;T[],Map&lt;T,V&gt;&gt;</td><td>V[] values</td><td></td></tr>
		</tbody></table>
        <!--  -->
        </div>
      
      </subsection>
      
      <subsection name="FnArrayOfArrayOf">

        <p>
          The functions in <b>FnArrayOfArrayOf</b> are applied on <em>Arrays of Arrays</em> of any type. <em>FnArrayOfArrayOf is a 
          parameterizable class</em> so, in order to use it, you must specify the type parameter 
          (i.e. FnArray.ofArrayOf(Types.INTEGER), FnArray.ofArrayOf(Types.LONG)). The example below shows how it can be used:                 
        </p>
        
        <div class="source">
        <pre>
/* The code below flattens the target Array of Array so, the result of the operation will be the array ["first", "second", "third"] */
Op.on(new String[][] {Op.onArrayFor("first", "second").get(), Op.onArrayFor("third").get()})
                .castToArrayOf(Types.ARRAY_OF_STRING).exec(
                FnArray.ofArrayOf(Types.STRING).flattenArrays()).get();</pre>
        </div>
        
        <div>
        <!-- Table with functions -->
        <table border="0">
		<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
		<tbody>
		<tr class="b"><td><b>flattenArrays</b></td><td>Function&lt;T[][],T[]&gt;</td><td></td><td></td></tr>
		</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnArrayOfListOf">

        <p>
          The functions in <b>FnArrayOfListOf</b> are applied on <em>Arrays of Lists</em> of any type. <em>FnArrayOfListOf is a 
          parameterizable class</em> so, in order to use it, you must specify the type parameter 
          (i.e. FnArray.ofListOf(Types.INTEGER), FnArray.ofListOf(Types.LONG)). The example below shows how it can be used:                 
        </p> 

        <div class="source">
        <pre>
/* The code below flattens the target Array of List so, the result of the operation will be the array ["first", "second", "third"] */
Op.on(new List[] {Op.onListFor("first", "second").get(), Op.onListFor("third").get()})
    .castToArrayOf(Types.LIST_OF_STRING).exec(
        FnArray.ofListOf(Types.STRING).flattenLists()).get();</pre>
        </div>
        
        <div>
        <!-- Table with functions -->
        <table border="0">
		<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
		<tbody>
		<tr class="b"><td><b>flattenLists</b></td><td>Function&lt;List&lt;T&gt;[],T[]&gt;</td><td></td><td></td></tr>
		</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnArrayOfSetOf">

        <p>
          The functions in <b>FnArrayOfSetOf</b> are applied on <em>Arrays of Sets</em> of any type. <em>FnArrayOfSetOf is a 
          parameterizable class</em> so, in order to use it, you must specify the type parameter 
          (i.e. FnArray.ofSetOf(Types.INTEGER), FnArray.ofSetOf(Types.LONG)). The example below shows how it can be used:                 
        </p>        
        
        <div class="source">
        <pre>
/* The code below flattens the target Array of Set so, the result of the operation will be the array ["first", "second", "third"] */
Op.on(new Set[] {Op.onSetFor("first", "second").get(), Op.onSetFor("third").get()})
    .castToArrayOf(Types.SET_OF_STRING).exec(
        FnArray.ofSetOf(Types.STRING).flattenSets()).get();</pre>
        </div>
        
        <div>
        <!-- Table with functions -->
        <table border="0">
		<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
		<tbody>
		<tr class="b"><td><b>flattenSets</b></td><td>Function&lt;Set&lt;T&gt;[],T[]&gt;</td><td></td><td></td></tr>
		</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
    </section>
  </body>
</document>
 
 


  