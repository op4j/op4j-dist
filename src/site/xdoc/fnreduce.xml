 <!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">


<document>
  <properties>
    <title>Functions: FnReduce</title>    
  </properties>
  <body>
  
    <section name="Functions: FnReduce">

      

      <subsection name="1. Overview">
        <p>
            <a href="http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29"><b>Reduce</b> (also known as Fold)</a> functions 
            receive, as a parameter, a function that is applied to two elements on each execution: the 
            function executes on two consecutive elements of the target list and returns another one that will be used
            as the first target element for the next execution of the function. 
        </p>
        
        <p>
            <a href="http://www.op4j.org/apidocs/org/op4j/functions/FnReduce.html"><b>FnReduce</b></a> is a 
            <em>parameterizable function hub class</em> and, before giving you access to the real functions, you will 
            have to specify the type parameter, which will give you access to the functions containing the reduce operations:                                    
        </p>
        <ul>
            <li>
                <code>FnReduce.onBigDecimal()</code>: returns <a href="#FnReduceOnBigDecimal">FnReduceOnBigDecimal</a>                                 
            </li>
            <li>
                <code>FnReduce.onBigInteger()</code>: returns <a href="#FnReduceOnBigInteger">FnReduceOnBigInteger</a>                                 
            </li>
            <li>
                <code>FnReduce.onBoolean()</code>: returns <a href="#FnReduceOnBoolean">FnReduceOnBoolean</a>
            </li>
            <li>
                <code>FnReduce.onByte()</code>: returns <a href="#FnReduceOnByte">FnReduceOnByte</a>                                
            </li>
            <li>
                <code>FnReduce.onDouble()</code>: returns <a href="#FnReduceOnDouble">FnReduceOnDouble</a>                                 
            </li>
            <li>
                <code>FnReduce.onFloat()</code>: returns <a href="#FnReduceOnFloat">FnReduceOnFloat</a>                                 
            </li>
            <li>
                <code>FnReduce.onInteger()</code>: returns <a href="#FnReduceOnInteger">FnReduceOnInteger</a>                                 
            </li>
            <li>
                <code>FnReduce.onLong()</code>: returns <a href="#FnReduceOnLong">FnReduceOnLong</a>                                 
            </li>
            <li>
                <code>FnReduce.onShort()</code>: returns <a href="#FnReduceOnShort">FnReduceOnShort</a>                                 
            </li>
            <li>
                <code>FnReduce.onString()</code>: returns <a href="#FnReduceOnString">FnReduceOnString</a>                                 
            </li>
            <li>
                <code>FnReduce.onCharacter()</code>: returns <a href="#FnReduceOn">FnReduceOn&lt;Character&gt;</a>                                 
            </li>
            <li>
                <code>FnReduce.onCalendar()</code>: returns <a href="#FnReduceOn">FnReduceOn&lt;Calendar&gt;</a>                                 
            </li>
            <li>
                <code>FnReduce.onDate()</code>: returns <a href="#FnReduceOn">FnReduceOn&lt;Date&gt;</a>                                 
            </li>
            <li>
                <code>FnReduce.onObject()</code>: returns <a href="#FnReduceOn">FnReduceOn&lt;Object&gt;</a>                                 
            </li>
            <li>
                <code>FnReduce.on(final Type&lt;T&gt; type)</code>: returns <a href="#FnReduceOn">FnReduceOn&lt;T&gt;</a> 
                parameterized with the given type. This is the most generic function in <em>FnReduce</em>                               
            </li>           
        </ul>
        
        <hr/>
        
        <p>
            These <em>Reduce</em> operations are <b>executed by means of the reduce method</b> as follows:
        </p>        
        <div class="source">
        <pre>
Op.on(...)...reduce(FnReduce.onX().Y(...))...;</pre> 
        </div>
        <p>as in</p>       
        <div class="source">
        <pre>
/* In this case, we insert an initial value: 13 */ 
Op.on(new Integer[] {2, 3, 4}).toList().reduce(FnReduce.onBigDecimal().avg(), BigDecimal.valueOf(13)).get(); 
            
            
Op.on(new Float[] {Float.valueOf(3), Float.valueOf(5), Float.valueOf(8), Float.valueOf(9)}) 
    .toList().reduce(FnReduce.onFloat().div(MathContext.DECIMAL32)).get(); 
            
 
/* In this case, we insert an initial value: 100 */ 
Op.on(new Integer[] {Integer.valueOf(3), Integer.valueOf(5), Integer.valueOf(8), Integer.valueOf(9)}) 
    .toList().reduce(FnReduce.onFloat().div(MathContext.DECIMAL32), Float.valueOf(100)).get();</pre>
        </div>        
        
        <p>        
        <em>Note that you can specify an initial value (as in the first and third examples above) which is initially
        combined with the first target element in the list (as op4j implements left fold).</em>
        </p>
                
      </subsection>

      <subsection name="FnReduceOnBigDecimal">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>BigDecimal</em>. Let's see some examples:                 
        </p>
        
        <div class="source">
        <pre>
/*  The code below would return 3.25 as avg(2, 3, 4) -> avg(avg(2, 3), 4) -> avg(2.5, 4) -> 3.25 */ 
Op.on(new Integer[] {2, 3, 4}).toList() 
    .forEach().exec(FnNumber.toBigDecimal()).endFor()              
    .reduce(FnReduce.onBigDecimal().avg(MathContext.DECIMAL32)).get(); 
                

/*  The code below would return 3 as avg(0, 2, 3, 4) -> avg(avg(avg(0, 2), 3), 4) -> avg(avg(1, 3), 4) -> avg(2, 4) -> 3 */ 
Op.on(new Integer[] {2, 3, 4}).toList()                             
    .reduce(FnReduce.onBigDecimal().avg(MathContext.DECIMAL32), BigDecimal.valueOf(0)).get();</pre>   
        </div>
        
        <div>
	    <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigDecimal&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
      
      </subsection>
      
      <subsection name="FnReduceOnBigInteger">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return an <em>Integer</em>. Let's see some
          examples:                
        </p>
        
        <div class="source">
        <pre>
Op.on(new Integer[] {Integer.valueOf(3), Integer.valueOf(5), Integer.valueOf(8), Integer.valueOf(9)}).toList()                      
    .reduce(FnReduce.onBigInteger().div(MathContext.DECIMAL32), BigInteger.valueOf(100)).get();
  
            
Op.on(new BigInteger[] {BigInteger.valueOf(3), BigInteger.valueOf(5), BigInteger.valueOf(8), BigInteger.valueOf(9)}).toList()                          
    .reduce(FnReduce.onBigInteger().div(MathContext.DECIMAL32)).get();</pre>
        </div>
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,BigInteger&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnBoolean">

        <p>
          These functions are to be applied on <em>Boolean</em> elements and all of them return a <em>Boolean</em>.                 
        </p>

        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>or</b></td><td>Function&lt;ValuePair&lt;Boolean,Boolean&gt;,Boolean&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnByte">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>Byte</em>.               
        </p>        
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Byte&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnDouble">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>Double</em>. Let's see some examples:                 
        </p>
        
        <div class="source">
        <pre>
/*  The code below would return 3.25 as avg(2, 3, 4) -> avg(avg(2, 3), 4) -> avg(2.5, 4) -> 3.25 */ 
Op.on(new Integer[] {2, 3, 4}).toList() 
    .forEach().exec(FnNumber.toDouble()).endFor()                
    .reduce(FnReduce.onDouble().avg(MathContext.DECIMAL32)).get(); 
    
            
/*  The code below would return 3.525 as avg(4.2, 2, 3, 4) -> avg(avg(avg(4.2, 2), 3), 4) -> avg(avg(3.1, 3), 4) -> avg(3.05, 4) -> 3.525 */ 
Op.on(new Integer[] {2, 3, 4}).toList()                             
    .reduce(FnReduce.onDouble().avg(MathContext.DECIMAL32), Double.valueOf(4.2)).get();</pre> 
        </div> 
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Double&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnFloat">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>Float</em>.                 
        </p>
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Float&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnInteger">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return an <em>Integer</em>.              
        </p>
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Integer&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnLong">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>Long</em>.                
        </p>
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Long&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnShort">

        <p>
          These functions are to be applied on <em>Numbers</em> and all of them return a <em>Short</em>.                 
        </p>
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td></td><td></td></tr>
<tr class="a"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="b"><td><b>avg</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td>RoundingMode roundingMode</td><td></td></tr>
<tr class="a"><td><b>div</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>mult</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td></td><td></td></tr>
<tr class="b"><td><b>remainder</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td>MathContext mathContext</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>subt</b></td><td>Function&lt;ValuePair&lt;Number,Number&gt;,Short&gt;</td><td></td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOnString">

        <p>
          These functions are to be applied on <em>Strings</em> and all of them return a <em>String</em> as well.           
        </p>
        
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>join</b></td><td>Function&lt;ValuePair&lt;String,String&gt;,String&gt;</td><td>String separator</td><td></td></tr>
</tbody></table>
        <!--  -->
        </div>
        
      </subsection>
      
      <subsection name="FnReduceOn">

        <p>
          The functions in <b>FnReduceOn</b> are applied on<em> objects</em> of any type. <em>FnReduceOn is a generic class</em> and, by calling
          <code>FnReduce.onCharacter(), FnReduce.onCalendar(), FnReduce.onDate(), FnReduce.onObject() or
          FnReduce.on(final Type&lt;T&gt; type)</code>, the type parameter can be replaced with the type you need at 
          any time so that chaining functions becomes easier and less error-prone.                 
        </p>
        
        <div class="source">
        <pre>
Op.on(new Calendar[] {Calendar.getInstance(), Calendar.getInstance()}).toList()                         
    .reduce(FnReduce.onCalendar().min()).get();
    
            
Op.on(aListOfComprables))                      
    .reduce(FnReduce.on(Types.forClass(MyClassOfComparables.class)).min()).get());</pre>  
        </div> 
        
        <div>
        <!-- Table with functions -->
<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>max</b></td><td>Function&lt;ValuePair&lt;T,T&gt;,T&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>maxBy</b></td><td>&lt;X extends Comparable&lt;? super X&gt;&gt; Function&lt;ValuePair&lt;T,T&gt;,T&gt;</td><td>IFunction&lt;? super T,X&gt; function</td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>min</b></td><td>Function&lt;ValuePair&lt;T,T&gt;,T&gt;</td><td></td><td></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>minBy</b></td><td>&lt;X extends Comparable&lt;? super X&gt;&gt; Function&lt;ValuePair&lt;T,T&gt;,T&gt;</td><td>IFunction&lt;? super T,X&gt; function</td><td></td></tr>
</tbody></table>
        </div>
        
      </subsection>
      
    </section>
  </body>
</document>
 
 


  