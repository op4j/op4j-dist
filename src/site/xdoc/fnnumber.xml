<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">


<document>
  <properties>
    <title>Functions: FnNumber</title>    
  </properties>
  <body>
  
    <section name="Functions: FnNumber">

      

      <subsection name="1. Overview">

        <p>
        	<b><a href="http://www.op4j.org/apidocs/org/op4j/functions/FnNumber.html">FnNumber</a></b> is a <em>function hub class</em>
        	containing a lot of static methods to work with Number objects. Those static methods return functions that deal 
        	with Number objects. Those functions include conversions to String, to String when the number 
        	represents a currency and rounding functions among others.        	  
        </p>
        
      </subsection>

      <subsection name="2. Functions">




<table border="0">
<thead><tr><th>Function name</th><th>Type</th><th width="240px">Params</th><th>Description</th></tr></thead>
<tbody>
<tr class="b"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>eq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object and the specified object are equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>eqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>eqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object and the specified object are equal in value, this is, whether <tt>target.compareTo(object) == 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>eqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are equal in value, this is, whether <tt>functionResult.compareTo(object) == 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object is greater or equal to the specified object in value, this is, whether <tt>target.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object is greater or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) >= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object is greater than the specified object in value, this is, whether <tt>target.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>greaterThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object is greater than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) > 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>isNotNull</b></td><td>Function&lt;Number,Boolean&gt;</td><td></td><td><p> Determines whether the target object is null or not. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>isNull</b></td><td>Function&lt;Number,Boolean&gt;</td><td></td><td><p> Determines whether the target object is null or not. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqTo</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object is less or equal to the specified object in value, this is, whether <tt>target.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessOrEqToBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object is less or equal to the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt;= 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThan</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object is less than the specified object in value, this is, whether <tt>target.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>lessThanBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object is less than the specified object parameter in value, this is, whether <tt>functionResult.compareTo(object) &lt; 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="a"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr class="b"><td><b>notEq</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object and the specified object are NOT equal by calling the <tt>equals</tt> method on the target object. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="b"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr class="a"><td><b>notEqBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function  on the target object and the specified object parameter are NOT equal by calling the <tt>equals</tt> method. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>Number object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>float object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>double object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>byte object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>short object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>int object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValue</b></td><td>Function&lt;Number,Boolean&gt;</td><td>long object</td><td><p> Determines whether the target object and the specified object are NOT equal in value, this is, whether <tt>target.compareTo(object) != 0</tt>. Both the target and the specified object have to implement  Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />Number object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />float object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />double object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />byte object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />short object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="b"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />int object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr class="a"><td><b>notEqValueBy</b></td><td>Function&lt;Number,Boolean&gt;</td><td>IFunction&lt;Number,?&gt; by<br />long object</td><td><p> Determines whether the result of executing the specified function on the target object and the specified object parameter are NOT equal in value, this is, whether <tt>functionResult.compareTo(object) != 0</tt>.  Both the function result and the specified object have to implement   Comparable. </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>roundBigDecimal</b></td><td>Function&lt;BigDecimal,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It rounds the target object with the specified scale and rounding mode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>roundDouble</b></td><td>Function&lt;Double,Double&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It rounds the target object with the specified scale and rounding mode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>roundFloat</b></td><td>Function&lt;Float,Float&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It rounds the target with the specified scale and rounding mode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toBigDecimal</b></td><td>Function&lt;Number,BigDecimal&gt;</td><td></td><td><p> It converts the input into a  BigDecimal </p></td></tr>
<tr class="b"><td><b>toBigDecimal</b></td><td>Function&lt;Number,BigDecimal&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It converts the input into a  BigDecimal using the given scale and  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toBigInteger</b></td><td>Function&lt;Number,BigInteger&gt;</td><td></td><td><p> It converts the input into a  BigInteger </p></td></tr>
<tr class="b"><td><b>toBigInteger</b></td><td>Function&lt;Number,BigInteger&gt;</td><td>RoundingMode roundingMode</td><td><p> It converts the input into a  BigInteger using the given  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="a"><td><b>toBoolean</b></td><td>Function&lt;Number,Boolean&gt;</td><td></td><td><p> It converts the input into a  Boolean </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toByte</b></td><td>Function&lt;Number,Byte&gt;</td><td></td><td><p> It converts the input into a  Byte </p></td></tr>
<tr class="a"><td><b>toByte</b></td><td>Function&lt;Number,Byte&gt;</td><td>RoundingMode roundingMode</td><td><p> It converts the input into a  Byte using the given  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td></td><td><p> It returns the  String representation of the target as a currency in the default  Locale </p></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>boolean groupingUsed</td><td><p> It returns the  String representation of the target as a currency in the default  Locale </p></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale</td><td><p> It returns the  String representation of the target as a currency in the given  Locale </p></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale</td><td><p> It returns the  String representation of the target as a currency in the given locale </p></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target as a currency in the given  Locale </p></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target as a currency in the given locale </p></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target as a currency in the given  Locale. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK, 3, 2, 2, true) would return &pound;1,000.00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK, 2, 2, 4, true) would return &pound;00.00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target as a currency in the given locale taking into account the given parameters. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK.toString(), 3, 2, 2, true) would return &pound;1,000.00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK.toString(), 2, 2, 4, true) would return &pound;00.00 if target number is 0</code></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target as a currency in the given  Locale taking into account the given parameters. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK, 3, 2, 2, ',', ',', true) would return &pound;1,000,00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK, 2, 2, 4, ',', ',', true) would return &pound;00,00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target as a currency in the given  Locale taking into account the given parameters. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK.toString(), 3, 2, 2, ',', ',', true) would return &pound;1,000,00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK.toString(), 2, 2, 4, ',', ',', true) would return &pound;00,00 if target number is 0</code></td></tr>
<tr class="b"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target as a currency in the given locale taking into account the given parameters. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK, 3, 2, 2, ',', ',', true) would return &pound;1,000,00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK, 2, 2, 4, ',', ',', true) would return &pound;00,00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toCurrencyStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target as a currency in the given locale taking into account the given parameters. If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toCurrencyStr(Locale.UK.toString(), 3, 2, 2, ',', ',', true) would return &pound;1,000,00 if target number is 1000</code> <br /> <code>toCurrencyStr(Locale.UK.toString(), 2, 2, 4, ',', ',', true) would return &pound;00,00 if target number is 0</code></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toDouble</b></td><td>Function&lt;Number,Double&gt;</td><td></td><td><p> It converts the target into a  Double </p></td></tr>
<tr class="a"><td><b>toDouble</b></td><td>Function&lt;Number,Double&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It converts the input into a  Double using the given scale and  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toFloat</b></td><td>Function&lt;Number,Float&gt;</td><td></td><td><p> It converts the input into a  Float </p></td></tr>
<tr class="a"><td><b>toFloat</b></td><td>Function&lt;Number,Float&gt;</td><td>int scale<br />RoundingMode roundingMode</td><td><p> It converts the target object into a  Float using the given scale and  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toInteger</b></td><td>Function&lt;Number,Integer&gt;</td><td></td><td><p> It converts the target into an  Integer </p></td></tr>
<tr class="a"><td><b>toInteger</b></td><td>Function&lt;Number,Integer&gt;</td><td>RoundingMode roundingMode</td><td><p> It converts the input into an  Integer using the given  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toLong</b></td><td>Function&lt;Number,Long&gt;</td><td></td><td><p> It converts the input into a  Long </p></td></tr>
<tr class="a"><td><b>toLong</b></td><td>Function&lt;Number,Long&gt;</td><td>RoundingMode roundingMode</td><td><p> It converts the input into a  Long using the given  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td></td><td><p> A  String representing a percentage is created from the target number. </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>boolean groupingUsed</td><td><p> A  String representing a percentage is created from the target number either using grouping or not depending on the given parameter. So, </p> <code>toPercentStr(true) would return 100,000% if target number is 1000</code> <br /> <code>toPercentStr(false) would return 100000% if target number is 1000</code></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale</td><td><p> A  String representing a percentage is created from the target number  in the given  Locale </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale</td><td><p> A  String representing a percentage is created from the target number  in the given locale </p></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />boolean groupingUsed</td><td><p> A  String representing a percentage is created from the target number  in the given  Locale. Grouping will be used depending on the value of the groupingUsed parameter. </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />boolean groupingUsed</td><td><p> A  String representing a percentage is created from the target number  in the given locale. Grouping will be used depending on the value of the groupingUsed parameter. </p></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> A  String representing a percentage is created from the target number  in the given  Locale.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> A  String representing a percentage is created from the target number  in the given locale.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> A  String representing a percentage is created from the target number  in the given  Locale and using the other given parameters as well.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> A  String representing a percentage is created from the target number  in the given locale and using the other given parameters as well.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr class="b"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> A  String representing a percentage is created from the target number  in the given locale and using the other given parameters as well.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr class="a"><td><b>toPercentStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> A  String representing a percentage is created from the target number  in the given locale and using the other given parameters as well.  If necessary, it will add leading or trailing zeros to the string  based on the given parameters.  </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toShort</b></td><td>Function&lt;Number,Short&gt;</td><td></td><td><p> It converts the input into a  Short </p></td></tr>
<tr class="a"><td><b>toShort</b></td><td>Function&lt;Number,Short&gt;</td><td>RoundingMode roundingMode</td><td><p> It converts the target into a  Short using the given  RoundingMode </p></td></tr>
<tr bgcolor="#A4A4A4" class=""><td bgcolor="#A4A4A4" colspan="4"></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td></td><td><p> It returns the  String representation of the input number  </p></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>boolean groupingUsed</td><td><p> It returns the  String representation of the input number either using or not using grouping </p></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale</td><td><p> It returns the  String representation of the target number in the given  Locale   </p></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale</td><td><p> It returns the  String representation of the target number in the given locale   </p></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target number in the given  Locale. Grouping  will be used depending on the value of the groupingUsed parameter   </p></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target number in the given locale. Grouping  will be used depending on the value of the groupingUsed parameter   </p></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target number in the given  Locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH, 3, 2, 2, true) would return 010.00 if target number is 10</code> <br /> <code>toStr(Locale.ENGLISH, 2, 2, 4, true) would return 00.00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed</td><td><p> It returns the  String representation of the target number in the given locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH.toString(), 3, 2, 2, true) would return 010.00 if target number is 10</code> <br /> <code>toStr(Locale.ENGLISH.toString(), 2, 2, 4, true) would return 00.00 if target number is 0</code></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target number in the given  Locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH, 3, 2, 2, ',', '.', true) would return 1,000.00 if target number is 1000</code> <br /> <code>toStr(Locale.ENGLISH, 2, 2, 4, ',', '.', true) would return 00.00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>Locale locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target number in the given  Locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH, 3, 2, 2, true, ',', true) would return 1,000,00 if target number is 1000</code> <br /> <code>toStr(Locale.ENGLISH, 2, 2, 4, true, ',', true) would return 00,00 if target number is 0</code></td></tr>
<tr class="b"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />char groupingSeparator<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target number in the given locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH.toString(), 3, 2, 2, ',', '.', true) would return 1,000.00 if target number is 1000</code> <br /> <code>toStr(Locale.ENGLISH.toString(), 2, 2, 4, ',', '.', true) would return 00.00 if target number is 0</code></td></tr>
<tr class="a"><td><b>toStr</b></td><td>Function&lt;Number,String&gt;</td><td>String locale<br />int minIntegerDigits<br />int minFractionDigits<br />int maxFractionDigits<br />boolean groupingUsed<br />char decimalSeparator<br />boolean decimalSeparatorAlwaysShown</td><td><p> It returns the  String representation of the target number in the given locale.  If necessary, it will add leading or trailing zeros to the string based on the given parameters. So, </p> <code>toStr(Locale.ENGLISH.toString(), 3, 2, 2, true, ',', true) would return 1,000,00 if target number is 1000</code> <br /> <code>toStr(Locale.ENGLISH.toString(), 2, 2, 4, true, ',', true) would return 00,00 if target number is 0</code></td></tr>
</tbody></table>


      </subsection>
      
    </section>
  </body>
</document>
